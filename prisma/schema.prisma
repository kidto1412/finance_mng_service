// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id            Int             @id @default(autoincrement())
  name          String
  email         String
  username      String          @unique
  password      String
  bank_user     bank_user[]
  transaction   transaction[]
  user_category user_category[]
  categories    category[]
}

model bank {
  id          Int           @id @default(autoincrement())
  bankName    String
  bank_user   bank_user[]
  transaction transaction[]
}

model bank_user {
  userId       Int
  bankId       Int
  totalBalance Int
  user         user @relation(fields: [userId], references: [id])
  bank         bank @relation(fields: [bankId], references: [id])

  @@id([userId, bankId])
}

enum TransactionType {
  DEBIT
  CREDIT
}

model transaction {
  id         String          @id @default(cuid())
  title      String
  date       String
  userId     Int
  bankId     Int
  categoryId Int
  amount     Int
  type       TransactionType
  bank       bank            @relation(fields: [bankId], references: [id])
  user       user            @relation(fields: [userId], references: [id])
  category   category        @relation(fields: [categoryId], references: [id])
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt

  @@index([userId])
  @@index([bankId])
}

model category {
  id            Int             @id @default(autoincrement())
  name          String
  userId        Int?
  user          user?           @relation(fields: [userId], references: [id]) // Relation to the user model
  user_category user_category[]
  transactions  transaction[]

  @@index([userId]) // Create an index on the userId for faster queries
}

model user_category {
  userId     Int
  categoryId Int
  users      user     @relation(fields: [userId], references: [id])
  category   category @relation(fields: [categoryId], references: [id])

  @@id([userId, categoryId])
}
